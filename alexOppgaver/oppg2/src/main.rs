#![feature(generators)]

use gen_iter::gen_iter;
use std::time::{ Instant };

/**
 * Even Fibonacci numbers
 * 
 * Each new term in the Fibonacci sequence is generated by 
 * adding the previous two terms. By starting with 1 and 2, 
 * the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose 
 * values do not exceed four million, find the sum of the 
 * even-valued terms.
 */

/**
 * Output:
 * The naive approach took:  0.000000163s, and provided the answer: 4613732
 */

fn main() {
    let mut now = Instant::now();
    let naive_answer = naive();
    println!("The naive approach took:  {}s, and provided the answer: {}", now.elapsed().as_secs_f32(), naive_answer);
}

fn naive() -> i32 {
    gen_iter!({
        let (mut a, mut b) = (1, 2);
        loop {
            let c = a + b;
            a = b; b = c;
            yield a;
        }
    })
    .filter(|&x| x % 2 == 0)
    .take_while(|&x| x < 4_000_000)
    .sum()
}
